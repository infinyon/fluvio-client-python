name: Publish

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
  push:
    tags:
      - 'v*'
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{matrix.python-version}}.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest] # TODO: add windows-2019,
        python-version: ["37", "38", "39", "310"]
    env:
      CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-* pp* *-win32"
      CIBW_ARCHS_MACOS: x86_64 universal2
      CIBW_ARCHS_LINUX: auto aarch64
      CIBW_BEFORE_ALL_LINUX: "{package}/tools/cibw_before_all_linux.sh"
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'

    steps:
      - uses: actions/checkout@v3

      # Used to host cibuildwheel
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - if: runner.os == 'macOS'
        name: Install Rust Stable
        uses: actions-rs/toolchain@v1
        with:
          target: aarch64-apple-darwin
          toolchain: stable
          override: true

      - if: runner.os != 'Linux'
        name: Setup env when not using docker
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust

      - if: runner.os == 'Linux'
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.10.1
        env:
          CIBW_BUILD: "cp${{matrix.python-version}}-manylinux_x86_64 cp${{matrix.python-version}}-macosx_x86_64 cp${{matrix.python-version}}-macosx_universal2 cp${{matrix.python-version}}-macosx_arm64" # cp${{matrix.python-version}}-musllinux_x86_64

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.10"

      - name: Install setuptools and setuptools-rust
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust
      - name: Build sdist
        run: python setup.py bdist_wheel sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  build_cc_wheels:
    name: Build wheels for Raspberry PI
    runs-on: ubuntu-latest
    env:
        CARGO: cross
    strategy:
      matrix:
          platform: [
              { name: "linux_armv7l", target: "armv7-unknown-linux-gnueabihf" },
              { name: "linux_armv6l", target: "arm-unknown-linux-gnueabihf" }
          ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.10"
      - name: Install Rust ${{ matrix.platform.target }}
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.platform.target }}
          profile: minimal
          toolchain: stable

      - name: Install cross
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: latest

      - name: Install setuptools and setuptools-rust
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust
      - name: Build cross image
        run: |
          docker build -f cross/Dockerfile.${{ matrix.platform.target }} -t  fluvio-cross-python:${{ matrix.platform.target }} cross
      - name: Build bdist
        run: python setup.py bdist_wheel --py-limited-api=cp37 --plat-name ${{ matrix.platform.name }}
        env:
            CARGO_BUILD_TARGET: ${{ matrix.platform.target }}
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl

  upload_pypi:
    needs: [build_wheels, build_sdist, build_cc_wheels]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        if: github.event_name == 'workflow_dispatch'
        with:
          user: __token__
          password: ${{ secrets.PYPI_ACCESS_TOKEN }}
