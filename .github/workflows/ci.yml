name: CI

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches: [staging, trying]
  pull_request:
    branches: [main]

jobs:
  check_fmt:
    name: check formatting
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            target/
          key: ${{ matrix.os }}-cargo-${{matrix.python-version}}-${{ hashFiles('**/Cargo.lock') }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: check fmt, flake8 and black
        run: make lint
      - name: Verify Docs generate
        run: |
          make docs-build
  smoke_test:
    name: Smoke test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            target/
          key: ${{ matrix.os }}-cargo-${{matrix.python-version}}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # - uses: AbsaOSS/k3d-action@v2
      #   name: "Create fluvio k3d Cluster"
      #   with:
      #     cluster-name: "fluvio"
      # - name: Sleep 20 to ensure k3d cluster is ready
      #   run: sleep 20
      # - name: Install Fluvio Cluster on k3d
      #   uses: infinyon/fluvio@master
      #   with:
      #     cluster-type: k3d
      #     version: stable
      - name: Install local Fluvio Cluster
        uses: infinyon/fluvio@master
        with:
          cluster-type: local
          version: stable
      - name: Check Fluvio Installation
        run: |
          fluvio version
          fluvio topic list
          fluvio topic create foobar
          sleep 3
          echo foo | fluvio produce foobar
          fluvio consume foobar -B -d
      - name: Build
        run: |
          make build-dev
      - name: Test
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: make integration-tests
        env:
          FLV_SOCKET_WAIT: 300

  macos_simple_tests:
    name: MacOS Simple test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        rust: [stable]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Install rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build
        run: |
          make build-dev

      - name: Test macOS failing to connect
        run: |
          make macos-ci-tests

  done:
    name: Done
    needs:
      - macos_simple_tests
      - smoke_test
      - check_fmt
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "Done!"
