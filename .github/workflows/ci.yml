name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
  check_fmt:
    name: check formatting
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: clippy
      - name: check fmt and flake8
        run: make lint
      - name: Verify Docs generate
        run: |
          make docs-build
  smoke_test:
    name: Smoke test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: AbsaOSS/k3d-action@v2
        name: "Create fluvio k3d Cluster"
        with:
          cluster-name: "fluvio"
      - name: Sleep 20 to ensure k3d cluster is ready
        run: sleep 20
      - name: Install Fluvio Local Cluster
        uses: infinyon/fluvio@master
        with:
          cluster-type: local
          version: latest
      - name: Check Fluvio Installation
        run: |
          fluvio version
          fluvio topic list
          fluvio topic create foobar
          sleep 3
          echo foo | fluvio produce foobar
          fluvio consume foobar -o 0 -d
      - name: Build
        run: |
          make build-dev
      - name: Test
        run: |
          make integration-tests

  macos_simple_tests:
    name: MacOS Simple test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        rust: [stable]
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build
        run: |
          make build-dev

      - name: Test macOS failing to connect
        run: |
          make macos-ci-tests
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }} on architecture ${{matrix.architecture}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04] # , macOS-10.15] # TODO: add windows-2019,
        python-version: ["36", "37", "38", "39", "310"]
        build-architecture: [manylinux_x86_64, manylinux_i686, musllinux_x86_64, musllinux_i686] #, macosx_x86_64, macosx_universal2, macosx_arm64]
    env:
      CIBW_ARCHS_MACOS: x86_64 universal2
      CIBW_ARCHS_LINUX: auto aarch64
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y openssl-devel perl-core"
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'

    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - if: runner.os == 'macOS'
        name: Install Rust Stable
        uses: actions-rs/toolchain@v1
        with:
          target: aarch64-apple-darwin
          toolchain: stable
          override: true

      - if: runner.os != 'Linux'
        name: Setup env when not using docker
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust

      - if: runner.os == 'Linux'
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.0
        env:
          CIBW_BUILD: "cp${{matrix.python-version}}-${{matrix.build-architecture}}"
