
foreign_class!(class Fluvio {
    self_type Fluvio;
    private constructor = empty;
    fn _Fluvio::connect() -> Result<Fluvio, FluvioError>;
    fn _Fluvio::partition_consumer(
        &self,
        _: String,
        _ : u32
    ) -> Result<PartitionConsumer, FluvioError>;
    fn _Fluvio::topic_producer(
        &self,
        _: String
    ) -> Result<TopicProducer, FluvioError>;
});
foreign_class!(class PartitionConsumer {
    self_type PartitionConsumer;
    private constructor = empty;
    fn _PartitionConsumer::stream(
        &self, _: &Offset
    ) -> Result<PartitionConsumerStream, FluvioError>;
    fn _PartitionConsumer::stream_with_config(
        &self, _: &Offset, _: &str
    ) -> Result<PartitionConsumerStream, FluvioError>;
});

foreign_class!(class PartitionConsumerStream{
    self_type PartitionConsumerStream;
    private constructor = empty;
    fn PartitionConsumerStream::next(
        &mut self
    ) -> Option<Result<Record, ErrorCode>>;
});

foreign_class!(
    #[derive(Clone)]
    class ProducerBatchRecord {
        self_type ProducerBatchRecord;
        constructor ProducerBatchRecord::new(_: Vec<u8>, _: Vec<u8>) -> ProducerBatchRecord;
        fn ProducerBatchRecord::clone(&self) -> ProducerBatchRecord;
    }
);

foreign_class!(class TopicProducer {
    self_type TopicProducer;
    private constructor = empty;
    fn _TopicProducer::send(
        &self,
        _: &[u8],
        _ : &[u8]
    ) -> Result<(), FluvioError>;
    fn _TopicProducer::send_all(
        &self,
        records: &[ProducerBatchRecord],
    ) -> Result<(), FluvioError>;
    fn _TopicProducer::flush(
        &self,
    ) -> Result<(), FluvioError>;
});

foreign_class!(class Record {
    self_type Record;
    private constructor = empty;
    fn Record::offset(&self) -> i64;
    fn Record::value(&self) -> &[u8];
    fn Record::key(&self) -> Option<&[u8]>;
    fn _Record::value_string(&self) -> Result<String, FromUtf8Error>;
    fn _Record::key_string(&self) -> Option<Result<String, FromUtf8Error>>;
});
foreign_class!(class Offset {
    self_type Offset;
    private constructor = empty;
    fn Offset::absolute(_ :i64) -> Result<Offset, FluvioError>;
    fn Offset::beginning() -> Offset;
    fn Offset::from_beginning(_: u32) -> Offset;
    fn Offset::end() -> Offset;
    fn Offset::from_end(_: u32) -> Offset;
});
